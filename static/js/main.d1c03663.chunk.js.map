{"version":3,"sources":["_src/gameOfLife.js","_src/lib.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","convertCoordinateToValue","convertValueToCoordinate","produceNextGenAliveCells","deductUpperBounds","addUpperBounds","module","exports","nextGeneration","currGeneration","bounds","currentGenCoordinates","currGenValues","length","width","alivePositions","nextGenValues","nextGenCoordinates","filterNeighbours","inputArray","initValue","totalArray","Array","fill","map","x","filter","includes","getNeighboursFirstColumn","position","neighbours","concat","getNeighboursLastColumn","getNeighboursMiddleColumn","getAllNeighbours","getLiveNeighboursLength","aliveArray","bottomRight","topLeft","inputArrayOfValue","y","input","Math","floor","deadCells","aliveNeighbourLength","bind","Cell","react_default","a","createElement","height","this","props","color","col","row","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","push","src_Cell","genCells","forEach","cell","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1c03663.chunk.js","sourcesContent":["const {\n  convertCoordinateToValue,\n  convertValueToCoordinate,\n  produceNextGenAliveCells,\n  deductUpperBounds,\n  addUpperBounds\n} = require(\"./lib.js\");\n\nconst nextGeneration = function(currGeneration, bounds) {\n  const currentGenCoordinates = deductUpperBounds(currGeneration, bounds);\n  const currGenValues = convertCoordinateToValue(currentGenCoordinates, bounds);\n  const { length, width, alivePositions } = currGenValues;\n\n  const nextGenValues = produceNextGenAliveCells(length, width, alivePositions);\n  let nextGenCoordinates = convertValueToCoordinate(nextGenValues, length);\n  return addUpperBounds(nextGenCoordinates, bounds);\n};\n\nmodule.exports = { nextGeneration };","const filterNeighbours = function(length, width, inputArray) {\n  let initValue = 1;\n  let totalArray = new Array(length * width).fill(0).map(x => initValue++);\n  return inputArray.filter(x => totalArray.includes(x));\n};\n\nconst getNeighboursFirstColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position + 1,\n    position + length,\n    position - length,\n    position + length + 1,\n    position - length + 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getNeighboursLastColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position - 1,\n    position + length,\n    position - length,\n    position + length - 1,\n    position - length - 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getNeighboursMiddleColumn = function(length, width, position) {\n  let neighbours = new Array(0).concat(\n    position + 1,\n    position - 1,\n    position + length,\n    position - length,\n    position + length + 1,\n    position + length - 1,\n    position - length + 1,\n    position - length - 1\n  );\n  return filterNeighbours(length, width, neighbours);\n};\n\nconst getAllNeighbours = function(length, width, position) {\n  if ((position - 1) % length == 0)\n    return getNeighboursFirstColumn(length, width, position);\n  if (position % length == 0)\n    return getNeighboursLastColumn(length, width, position);\n  return getNeighboursMiddleColumn(length, width, position);\n};\n\nconst getLiveNeighboursLength = function(aliveArray, length, width, position) {\n  let allNeighbourArray = getAllNeighbours(length, width, position);\n  return allNeighbourArray.filter(x => aliveArray.includes(x)).length;\n};\n\nconst convertCoordinateToValue = function(inputArray, bounds) {\n  let length = bounds.bottomRight[1] - bounds.topLeft[1] + 1;\n  let width = bounds.bottomRight[0] - bounds.topLeft[0] + 1;\n  inputArray = inputArray.map(x => x.filter(y => y < length));\n  let inputArrayOfValue = inputArray.map(x => x[0] * length + x[1] + 1);\n  return { length: length, width: width, alivePositions: inputArrayOfValue };\n};\n\nconst convertValueToCoordinate = function(input, length) {\n  return input.map(x => [Math.floor((x - 1) / length), (x - 1) % length]);\n};\n\nconst produceNextGenAliveCells = function(length, width, aliveArray) {\n  let initValue = 1;\n  let deadCells = new Array(length * width)\n    .fill(0)\n    .map(x => initValue++)\n    .filter(x => !aliveArray.includes(x));\n\n  const aliveNeighbourLength = getLiveNeighboursLength.bind(\n    null,\n    aliveArray,\n    length,\n    width\n  );\n\n  let aliveCells = aliveArray.filter(\n    x => aliveNeighbourLength(x) == 2 || aliveNeighbourLength(x) == 3\n  );\n  return aliveCells.concat(deadCells.filter(x => aliveNeighbourLength(x) == 3));\n};\n\nconst deductUpperBounds = function(currGeneration, bounds) {\n  return currGeneration.map(function(x) {\n    x[0] = x[0] - bounds.topLeft[0];\n    x[1] = x[1] - bounds.topLeft[1];\n    return x;\n  });\n};\n\nconst addUpperBounds = function(currGeneration, bounds) {\n  return currGeneration.map(function(x) {\n    x[0] = x[0] + bounds.topLeft[0];\n    x[1] = x[1] + bounds.topLeft[1];\n    return x;\n  });\n};\n\nmodule.exports = {\n  convertCoordinateToValue,\n  convertValueToCoordinate,\n  produceNextGenAliveCells,\n  deductUpperBounds,\n  addUpperBounds,\n  filterNeighbours,\n  getNeighboursFirstColumn,\n  getNeighboursMiddleColumn,\n  getNeighboursLastColumn,\n  getAllNeighbours,\n  getLiveNeighboursLength\n};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}